# Minimal makefile for Sphinx documentation
#

# Put it first so that "make" without argument is like "make help".
help:
	@$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)

# You can set these variables from the command line, and also
# from the environment for the first two.
SPHINXOPTS    ?=
SPHINXBUILD   ?= sphinx-build
SOURCEDIR     = source
BUILDDIR      = build

export PYTHONPATH := ../../fugu:$(PYTHONPATH)
APIDOC_FILES  = examples*.rst fugu*.rst



# Internal variables.
PAPEROPT_a4     = -D latex_paper_size=a4
PAPEROPT_letter = -D latex_paper_size=letter
ALLSPHINXOPTS   = -d $(BUILDDIR)/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .
# the i18n builder cannot share the environment and doctrees with the others
I18NSPHINXOPTS  = $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .

.PHONY: help Makefile


all: html

#
# This creates a git repository and commits generated html docs.
# It them pushes the new branch into THIS repository as gh-pages.
#
# github for some reason runs jekyll automatically on gh-pages
# files, but we don't want that.  'touch .nojekyll' takes care
# of it.
##### Will USE WHEN GITHUB UP
# gh-pages: _build/html
# 	root="$$(git rev-parse --show-toplevel)" && \
# 	cd _build/html && \
# 	rm -rf .git && \
# 	touch .nojekyll && \
# 	git init && \
# 	git add . && \
# 	git commit -m "Fugu Documentation" && \
# 	git push -f $$root master:gh-pages && \
# 	rm -rf .git
# ##This version makes gh-pages into a single page that redirects
# ##to spack.readthedocs.io
# gh-pages-redirect:
# 	root="$$(git rev-parse --show-toplevel)" && \
# 	cd _gh_pages_redirect && \
# 	rm -rf .git && \
# 	git init && \
# 	git add . && \
# 	git commit -m "Fugu Documentation" && \
# 	git push -f $$root master:gh-pages && \
# 	rm -rf .git
# upload:
# 	rsync -avz --rsh=ssh --delete _build/html/ cab:/usr/global/web-pages/lc/www/adept/docs/spack
# 	git push -f github gh-pages


apidoc:
	sphinx-apidoc -f -T -o . ../examples
	sphinx-apidoc -f -T -o . ../fugu

help:
	@echo "Please use \`make <target>' where <target> is one of"
	@echo "  html       to make standalone HTML files"
	@echo "  doctest    to run all doctests embedded in the documentation (if enabled)"



clean:
	-rm -f command_index.rst
	-rm -rf $(BUILDDIR)/* $(APIDOC_FILES)

html:
	$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html
	@echo
	@echo "Build finished. The HTML pages are in $(BUILDDIR)/html."


latex:
	$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex
	@echo
	@echo "Build finished; the LaTeX files are in $(BUILDDIR)/latex."
	@echo "Run \`make' in that directory to run these through (pdf)latex" \
	      "(use \`make latexpdf' here to do that automatically)."

# doctest:
# 	$(SPHINXBUILD) -b doctest $(ALLSPHINXOPTS) $(BUILDDIR)/doctest
# 	@echo "Testing of doctests in the sources finished, look at the " \
# 	      "results in $(BUILDDIR)/doctest/output.txt."


# Catch-all target: route all unknown targets to Sphinx using the new
# "make mode" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).
%: Makefile
	@$(SPHINXBUILD) -M $@ "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
